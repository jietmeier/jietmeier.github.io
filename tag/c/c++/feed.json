{
    "version": "https://jsonfeed.org/version/1",
    "title": "jietmeier's blog • All posts by \"c/c++\" tag",
    "description": "",
    "home_page_url": "http://jietmeier.xyz",
    "items": [
        {
            "id": "http://jietmeier.xyz/2020/10/hdu_1007/",
            "url": "http://jietmeier.xyz/2020/10/hdu_1007/",
            "title": "平面最近点对——HDU-1007",
            "date_published": "2020-10-08T03:05:00.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><a href=\"https://vjudge.net/problem/HDU-1007\">D - 套环游戏设计</a>  <a href=\"https://vjudge.net/problem/HDU-1007/origin\">HDU - 1007 </a></p>\n<p>你是否玩过套环游戏？套环游戏就是用环去套一些玩具，套中的玩具就作为奖励送给你。在二维平面上，每个玩具的位置是固定的，用来套环的环也是精心设计的，使得每次最多只能套中一个玩具。为了让套环游戏更有吸引力，Lucas_V 同学决定将环的半径设计的尽量最大。给定一个平面和平面上放置在固定位置的 n 个玩具，请你帮 Lucas_V 同学找到这个环的最大半径。<br>\n我们假设所有的玩具都是平面上的一个点，如果玩具到环的中心点的距离小于半径，我们就认为玩具被套中了。如果两个玩具在同一个位置，我们认为它们之间的距离为 0。</p>\n<h3 id=\"输入\"><a class=\"markdownIt-Anchor\" href=\"#输入\">#</a> 输入</h3>\n<p>输入包含若干组测试数据。对于每组测试数据，第一行是一个整数 N（2≤N≤100 000），代表平面上的所有玩具的数目；然后紧接着 N 行，每行都含有一对（x, y），表示每个玩具的具体坐标位置。输入以 N=0 结束。</p>\n<h3 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\">#</a> 输出</h3>\n<p>对于每组数据，输出环的最大半径，输出数据精确到小数点后 2 位。</p>\n<h3 id=\"输入样例\"><a class=\"markdownIt-Anchor\" href=\"#输入样例\">#</a> 输入样例</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">0 0</span><br><span class=\"line\">1 1</span><br><span class=\"line\">2</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 1</span><br><span class=\"line\">3</span><br><span class=\"line\">-1.5 0</span><br><span class=\"line\">0 0</span><br><span class=\"line\">0 1.5</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出样例\"><a class=\"markdownIt-Anchor\" href=\"#输出样例\">#</a> 输出样例</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.71</span><br><span class=\"line\">0.00</span><br><span class=\"line\">0.75</span><br></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>这是一个求平面最近点对问题，重点学习分治思想，解决最近点对问题。</p>\n<h3 id=\"平面最近点对\"><a class=\"markdownIt-Anchor\" href=\"#平面最近点对\">#</a> 平面最近点对</h3>\n<p>平面坐标系中有 n 个点，给你这 n 个点的坐标，求出距离最近的两个点之间的距离。</p>\n<p>O (n^2) 的做法：暴力枚举两点之间的距离</p>\n<p>n 不大的情况下，复杂度为 O (n^2) 是可以接受的，但当 n 增大时，时间成本增长过快。</p>\n<p>对于所有的点来说，距离<strong>较远</strong>的两个点不可能是最近点对，在计算距离的时候，可仅考虑距离小于某个值的点。</p>\n<h4 id=\"算法思想\"><a class=\"markdownIt-Anchor\" href=\"#算法思想\">#</a> 算法思想</h4>\n<p>在平面中的点以 x 坐标升序排序，可以找到一个位于中间位置的点，把平面上的点集分为左右两个子集，记为 P、Q。</p>\n<p>要求的点对有三种可能的情况：</p>\n<p>1. 在 P 集内</p>\n<p>2. 在 Q 集内</p>\n<p>3. 两点分别在 P、Q 集</p>\n<p>分别记 P、Q 集的最近点对距离为 dist1 和 dist2</p>\n<p>记 d = min (dist1, dist2)</p>\n<p>对于 3 的情况，我们仅考虑位于左右交界处附近的点对，也就是以点 A 为分界线，两侧 x 方向上距离 &lt;=d 的范围。(图中两绿色虚线之间的绿色点)</p>\n<p><img src=\"/image/post/hdu_1007/1.png\" alt=\"img\"></p>\n<p>在这个绿色长条中再求一个最小距离 ds</p>\n<p>min (d, ds) 即全部点中的最小距离</p>\n<blockquote>\n<p>在分治的过程中，当集合中<strong>仅有两个点</strong>时，直接输出两点之间的距离，此时这个距离就是当前集合中的最近距离。</p>\n</blockquote>\n<p>计算 ds 的过程中，可以把 y 方向上的距离超过 d 的点直接忽略掉。也就是说，对于每个点仅考虑它所在的一个 d*2d 的矩形区域。</p>\n<h4 id=\"复杂度\"><a class=\"markdownIt-Anchor\" href=\"#复杂度\">#</a> 复杂度</h4>\n<p>此分治算法的复杂度为 O (nlogn)，具体证明过程参考网上的文章。<s>我不太会</s></p>\n<h3 id=\"对于本题\"><a class=\"markdownIt-Anchor\" href=\"#对于本题\">#</a> 对于本题</h3>\n<p>本题中求套环的最大半径。</p>\n<p>为了使套环每次最多只能套中一个玩具，套环的最大直径要小于最小点对的距离，即最大半径为一半的最小距离。</p>\n<p>在求得最小距离后，除 2 即答案。</p>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/*点*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">POS</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">POS</span> <span class=\"title\">pos</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*x方向比较函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp_x</span><span class=\"params\">(pos a,pos b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.x==b.x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*y方向比较函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp_y</span><span class=\"params\">(pos a,pos b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.y==b.y)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*计算距离*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dist</span><span class=\"params\">(pos *a,pos *b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>( <span class=\"built_in\">pow</span>(a-&gt;x-b-&gt;x,<span class=\"number\">2</span>) + <span class=\"built_in\">pow</span>(a-&gt;y-b-&gt;y,<span class=\"number\">2</span>) );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*子区域内的最小距离*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">minSubQDist</span><span class=\"params\">(pos *first, pos *last)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last - first == <span class=\"number\">1</span>)&#123; <span class=\"comment\">// 如果区域内只有两个点，直接返回距离</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dist(first, last);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 当区域[first,last]内的点&gt;=3时, 分治,</span></span><br><span class=\"line\">    <span class=\"comment\">// 分别求两个子区域[first,midInx],[midInx,last]内的最小值</span></span><br><span class=\"line\">    <span class=\"comment\">// 从两者中取一个最小值</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    pos *midInx = first + (last-first)/<span class=\"number\">2</span>; <span class=\"comment\">// 中间的地址</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> minDist,dist1,dist2;</span><br><span class=\"line\">    dist1 = minSubQDist(first, midInx); <span class=\"comment\">// 第一个子集</span></span><br><span class=\"line\">    dist2 = minSubQDist(midInx,last); <span class=\"comment\">// 第二个子集</span></span><br><span class=\"line\">    minDist = <span class=\"built_in\">std</span>::min(dist1,dist2); <span class=\"comment\">// 两个子集中最小值的最小值</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//// 下面找midInx在x方向小于minDist的点</span></span><br><span class=\"line\">    pos *left = midInx;</span><br><span class=\"line\">    pos *right = midInx;</span><br><span class=\"line\">    <span class=\"comment\">//前半部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pos *i = first; i &lt; midInx; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i-&gt;x &gt; midInx-&gt;x - minDist)&#123;</span><br><span class=\"line\">            left = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后半部分</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (pos *i = last; i &gt; midInx; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i-&gt;x &lt; midInx-&gt;x + minDist)&#123;</span><br><span class=\"line\">            right = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left!=right)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::sort(left,right+<span class=\"number\">1</span>,cmp_y); <span class=\"comment\">// 注意std::sort和minSubQDist的第二个参数 第一遍在这里忘+1, wa了</span></span><br><span class=\"line\">        <span class=\"comment\">//枚举所有点的距离</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (pos *i = left; i &lt;= right; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (pos *j = i+<span class=\"number\">1</span>; j &lt;= right; j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j-&gt;y - i-&gt;y &lt;= minDist)&#123;<span class=\"comment\">//y方向距离值小于mindist，计算之间的距离，并更新最小距离值mindist</span></span><br><span class=\"line\">                    minDist = <span class=\"built_in\">std</span>::min(minDist, dist(i,j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;<span class=\"comment\">//y方向的距离已经大于等于mindist，跳出内层循环 </span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;           </span><br><span class=\"line\">        &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minDist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> N;</span><br><span class=\"line\">    pos a[<span class=\"number\">100005</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;N) &amp;&amp; N)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf%lf&quot;</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::sort(a,a+N,cmp_x);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d = minSubQDist(a,a+N<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2lf\\n&quot;</span>,d/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<p><a href=\"https://blog.nowcoder.net/n/98f81764461349e4b59403228a0b7591\">[1]- 算法课 - 平面最近点对</a></p>\n<p><a href=\"https://blog.csdn.net/GGN_2015/article/details/80785621\">[2]- 平面最近点对的分治做法及其证明</a></p>\n<p><a href=\"https://oi-wiki.org/geometry/nearest-points/\">[3]- 平面最近点对</a></p>\n<p><a href=\"https://blog.csdn.net/u014296991/article/details/80908106\">[4]- 分治法解决最近点对问题</a></p>\n",
            "tags": [
                "C/C++",
                "分治"
            ]
        },
        {
            "id": "http://jietmeier.xyz/2020/10/cf_599/",
            "url": "http://jietmeier.xyz/2020/10/cf_599/",
            "title": "cf_599d题解",
            "date_published": "2020-10-03T13:01:00.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><a href=\"https://vjudge.net/problem/CodeForces-599D\">E - Echol 和方格</a> <a href=\"https://vjudge.net/problem/CodeForces-599D/origin\">CodeForces - 599D</a></p>\n<p>给定一个整数 x，Echol 请你找出所有的整数对（n，m），使得 nm 大小的矩形刚好能有 x 个不同的正方形（正方形的边长只取正整数 1、2、3… 依次类推，并且 4 个顶点只能放置在整数坐标位置，同样大小的正方形在不同的位置算不同的正方形）。例如在一张 35 的桌子中，可以有 15 个不同的 11 大小的正方形、8 个 22 大小的正方形和 3 个 33 大小的正方形，一共有 26 个不同的正方形。</p>\n<p>在一个 1<em>2 的矩形中，含有两个 1</em>1 的正方形，所以一共有 2 个不同的正方形（下图红色表示不同的正方形）。</p>\n<p><img src=\"/image/post/cf_599/1.jpg\" alt=\"img\"></p>\n<p>在一个 2<em>3 的矩形中，含有 6 个 1</em>1 的正方形、2 个 2*2 的正方形，也就是一共由 8 个不同的正方形（下图红色表示不同的正方形）。</p>\n<p><img src=\"/image/post/cf_599/2.jpg\" alt=\"img\"></p>\n<p>现在已知一个矩形中包含一定数量的正方形，问这个矩形有多少种不同的可能。<br>\n例如，给定一个数字 2，也就是某个矩形 nm 里面只能放置 2 种不同的正方形，那么这个矩形可能的大小为 12 和 2*1，一共有 2 种不同的矩形满足条件。</p>\n<p>Input</p>\n<p>第一行包含一个整数 <em>x</em> (1 ≤ <em>x</em> ≤ 10^18) — 表示矩形中包含的正方形个数。</p>\n<p>Output</p>\n<p>输出整数 k 表示有多少种不同的矩形满足条件。<br>\n之后输出 k 对整数，每对整数描述一个矩形。按照 n 递增的顺序输出。</p>\n<p>Examples</p>\n<p>输入样例 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">26</span><br></pre></td></tr></table></figure>\n<p>输出样例 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">1 26</span><br><span class=\"line\">2 9</span><br><span class=\"line\">3 5</span><br><span class=\"line\">5 3</span><br><span class=\"line\">9 2</span><br><span class=\"line\">26 1</span><br></pre></td></tr></table></figure>\n<p>输入样例 2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>输出样例 2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 1</span><br></pre></td></tr></table></figure>\n<p>输入样例 3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<p>输出样例 3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 8</span><br><span class=\"line\">2 3</span><br><span class=\"line\">3 2</span><br><span class=\"line\">8 1</span><br></pre></td></tr></table></figure>\n<p>输入样例 4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<p>输出样例 4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1 1</span><br></pre></td></tr></table></figure>\n<h2 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>考虑一个 m×n 大小的矩形，内部可以有的正方形个数</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S=\\sum_{i=0}^{min(m,n)-1}(m-i)(n-i)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2386740000000005em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">m</span><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">m</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\">n</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>因为 m 和 n 是等价的，仅考虑 n &lt;= m 的情况，可以让计算量减小一半，则</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mo stretchy=\"false\">(</mo><mi>m</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>≤</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S=\\sum_{i=0}^{n-1}(m-i)(n-i),(n \\leq m)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>m</mi><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>i</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">S=\\sum_{i=0}^{n-1}mn-i(m+n)+i^2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi>m</mi><msup><mi>n</mi><mn>2</mn></msup><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mn>1</mn><mn>6</mn></mfrac><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S=mn^2-\\frac{1}{2}n(n-1)+\\frac{1}{6}n(n-1)(2n-1)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>化简得</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mn>6</mn><mi>S</mi><mo>−</mo><msup><mi>n</mi><mn>3</mn></msup><mo>−</mo><mi>n</mi></mrow><mrow><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi></mrow></mfrac><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{6S-n^3-n}{3n^2+3n}=m\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.260438em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">m</span></span></span></span></span></p>\n<p>输入 s 后，从 0 开始遍历 n，直到 n&gt;m 停止，把所有 n&lt;=m，且 m 为整数的结果存入数组。</p>\n<p>后正向输出一遍，反向输出一遍</p>\n<p>注意 n=m 的情况，不要重复输出</p>\n<h2 id=\"ac代码\"><a class=\"markdownIt-Anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll maxn = <span class=\"number\">1e7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ans</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tll n;</span><br><span class=\"line\">\tll m;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ans</span> <span class=\"title\">list</span>[<span class=\"title\">maxn</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tll s,n,m,top,sub;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>,flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// float s,n,m;</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;s);</span><br><span class=\"line\">\tm=s;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (n = <span class=\"number\">1</span>; n &lt;= m; n++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttop = (<span class=\"number\">6</span>*s + n*n*n - n);</span><br><span class=\"line\">\t\tsub = (<span class=\"number\">3</span>*n*n+<span class=\"number\">3</span>*n);</span><br><span class=\"line\">\t\tm =  top/sub ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (top%sub == <span class=\"number\">0</span> &amp;&amp; n &lt;= m)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// printf(&quot;%lld %lld\\n&quot;,n,m);</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">list</span>[cnt].m = m;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">list</span>[cnt].n = n;</span><br><span class=\"line\">\t\t\tcnt++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//以下输出部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].n == <span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].m)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tflag=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,cnt*<span class=\"number\">2</span><span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,cnt*<span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld\\n&quot;</span>,<span class=\"built_in\">list</span>[i].n,<span class=\"built_in\">list</span>[i].m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld\\n&quot;</span>,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].n,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld\\n&quot;</span>,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].n,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].m);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld\\n&quot;</span>,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].m,<span class=\"built_in\">list</span>[cnt<span class=\"number\">-1</span>].n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cnt<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld\\n&quot;</span>,<span class=\"built_in\">list</span>[i].m,<span class=\"built_in\">list</span>[i].n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数学",
                "C/C++"
            ]
        }
    ]
}